#! /usr/bin/env bash

#PBS -N bckp_<EXPID>_<LEG>
#PBS -q ns
#PBS -l EC_billing_account=<ACCOUNT>
#PBS -j oe
#PBS -l EC_ecfs=1
#PBS -o log/bckp_<EXPID>_<LEG>.out
##PBS -l walltime=24:00:00

 #######################################################################
 # Script that MOVES output and restart of one leg of a run to ECFS.   #
 # Two inputs, EXP and LEG number. Here, we have a template so sed it. #
 #######################################################################
 # Notes:                                                              #
 # - safely restart where it stops if crashes. Just resubmit.          #
 #######################################################################

set -e

cd $PBS_O_WORKDIR

############################# To be sed #############################

exp=<EXPID>
leg=<LEG>

######################### Hardcoded options #########################

tar_restart=1

# -- set to 0 if you want to ignore these data
do_restart=0
do_ifs_output=0  
do_nemo_output=0 
do_hiresclim2=1
do_climato=0

# IN & OUT top dirs
runs_dir="${SCRATCH}/ECEARTH-RUNS/"
ecfs_dir="ec:/${USER}/ECEARTH-RUNS/${exp}"

#####################################################################
# All commands to be executed from the run top directory
cd ${runs_dir}/${exp}

nextleg=$(( leg + 1 ))
legnb=$(printf %03d ${leg})
legnbP1=$(printf %03d ${nextleg})

# -- check for last leg (works as long as code is not still running and processing the last finished leg)
is_last=1
[ -d output/ifs/${legnbP1} ]  && is_last=0
[ -d output/nemo/${legnbP1} ] && is_last=0

do_log=${is_last}               # pack all logs when doing last leg

# -- summary
echo " *II* processing leg $legnb"
(( is_last )) && echo " *II* LAST LEG ASSUMED"
echo " *II* all restart: $do_restart"
echo " *II*  ifs output: $do_ifs_output"
echo " *II* nemo output: $do_nemo_output"
echo " *II*  hiresclim2: $do_hiresclim2"

##############
# Utilities  #
##############
bckp_emcp () {
    emv -e $1  ${ecfs_dir}/$1
    echmod 444 ${ecfs_dir}/$1
}

maxsize=34359738368             # limit in bytes for emv as of October 2017 (32GB)

split_move () {
    # split if larger than what emv can handle (34359738368 bytes)
    local f=$1
    actualsize=$(du -b "$f" | cut -f 1)
    if (( $actualsize > $maxsize )); then
        nn=$(( $actualsize / $maxsize + 1))
        split -n $nn -a 1 -d $f ${f}_
        \rm -f $f
        for k in $(eval echo {0..$((nn-1))})
        do 
            bckp_emcp ${f}_${k}
        done
    else
        bckp_emcp $f
    fi
}

not_empty_dir () {
    [[ ! -d "$1" ]] && return 1
    [ -n "$(ls -A $1)" ] && return 0 || return 1
}

############
# RESTARTS #
############
if (( do_restart ))
then
    if $(not_empty_dir restart/ifs/${legnbP1}) || (( is_last ))
    then
        echo; echo " *** IFS RESTART ${legnbP1} ***"; echo

        if (( ! tar_restart ))
        then 
            emkdir -p ${ecfs_dir}/restart/ifs/${legnbP1}
            echmod 755 ${ecfs_dir}/restart/ifs/${legnbP1}
        fi

        if (( is_last ))
        then
            if (( tar_restart ))
            then 
                f=restart.ifs.${legnbP1}.tar
                tar -cf $f  srf* ece.info rcf
                split_move $f
            else
                for f in srf* ece.info rcf
                do
                    if [[ -f $f ]]; then
                        emv -e $f ${ecfs_dir}/restart/ifs/${legnbP1}/$f
                        echmod 444 ${ecfs_dir}/restart/ifs/${legnbP1}/$f
                    fi
                done
            fi
        else
            if (( tar_restart ))
            then 
                # need to check if remote exists to trap cases of crash after
                # 'split_move' and before end of '\rm -f', for now let script stop
                f=$(echo restart/ifs/${legnbP1} | sed "s|/|.|g").tar
                tar -cf $f restart/ifs/${legnbP1}
                split_move $f
                \rm -f restart/ifs/${legnbP1}/*
            else
                for f in restart/ifs/${legnbP1}/*
                do
                    [[ -f $f ]] && split_move $f
                done      
            fi  
        fi
    fi
 
    if [[ -f nemo.exe.lnk ]]
    then
        if $(not_empty_dir restart/nemo/${legnbP1}) || (( is_last ))
        then
            echo; echo " *** NEMO RESTART ${legnbP1} ***"; echo

            if (( ! tar_restart ))
            then 
                emkdir -p ${ecfs_dir}/restart/nemo/${legnbP1}
                echmod 755 ${ecfs_dir}/restart/nemo/${legnbP1}
            fi

            if (( is_last ))
            then
                if (( tar_restart ))
                then 
                    f=restart.nemo.${legnbP1}.tar
                    tar -cf $f ${exp}_????????_restart_oce_????.nc ${exp}_????????_restart_ice_????.nc
                    split_move $f
                else
                    for f in ${exp}_????????_restart_oce_????.nc ${exp}_????????_restart_ice_????.nc
                    do
                        if [[ -f $f ]]; then
                            emv -e $f ${ecfs_dir}/restart/nemo/${legnbP1}/$f
                            echmod 444 ${ecfs_dir}/restart/nemo/${legnbP1}/$f
                        fi
                    done
                fi
            else            
                if (( tar_restart ))
                then 
                # need to check if remote exists to trap cases of crash after
                # 'split_move' and before end of '\rm -f', for now let the script stop
                    f=$(echo restart/nemo/${legnbP1} | sed "s|/|.|g").tar
                    tar -cf $f restart/nemo/${legnbP1}
                    split_move $f
                    \rm -f restart/nemo/${legnbP1}/*                   
                else
                    for f in restart/nemo/${legnbP1}/*
                    do
                        [[ -f $f ]] && split_move $f
                    done        
                fi
            fi
        fi
    fi

    if not_empty_dir restart/oasis/${legnbP1}
    then
        echo; echo " *** OASIS RESTART ${legnbP1} ***"; echo

        if (( tar_restart ))
        then 
            # need to check if remote exists to trap cases of crash after
            # 'split_move' and before end of '\rm -f', for now let the script stop
            f=$(echo restart/oasis/${legnbP1} | sed "s|/|.|g").tar
            tar -cf $f restart/oasis/${legnbP1}
            split_move $f
            \rm -f restart/oasis/${legnbP1}/*
        else
            emkdir -p ${ecfs_dir}/restart/oasis/${legnbP1}
            echmod 755 ${ecfs_dir}/restart/oasis/${legnbP1}

            for f in restart/oasis/${legnbP1}/*
            do
                [[ -f $f ]] && split_move $f
            done        
        fi
    fi
fi

###############
# NEMO output #
###############
if (( do_nemo_output )) && not_empty_dir output/nemo/${legnb}
then
    echo; echo " *** NEMO OUTPUT ${legnb} ***"; echo

    emkdir -p ${ecfs_dir}/output/nemo/${legnb}
    echmod 755 ${ecfs_dir}/output/nemo/${legnb}

    for ff in output/nemo/${legnb}/*
    do
        if [[ $ff =~ ${exp}.*\.nc$ ]]
        then
            gzip ${ff}
            split_move $ff.gz
        else
            [[ -f $ff ]] && split_move $ff
        fi
    done
fi
 
##############
# IFS output #
##############
if (( do_ifs_output )) && not_empty_dir output/ifs/${legnb}
then
    echo; echo " *** IFS OUTPUT ${legnb} ***"; echo

    emkdir -p ${ecfs_dir}/output/ifs/${legnb}
    echmod 755 ${ecfs_dir}/output/ifs/${legnb}

    for f in output/ifs/${legnb}/*   # only GG not SH files are worth zipping
    do        
        # -- [crash cases] already compressed GG, and maybe with a split
        if [[ $f =~ ICMGG${exp}.*gz(_[0-9])?$ ]]
        then
            split_move $f

        # -- compress GG
        elif [[ $f =~ ICMGG${exp} ]]
        then
            gzip ${f}
            split_move $f.gz
        else
            # check on file, may have been emoved if a split was repeated
            [[ -f $f ]] && split_move $f
        fi
    done
fi

############################
# CLIMATOLOGY from EC-Mean # (default location assumed)
############################
if (( do_climato )) && not_empty_dir post
then
    echo; echo " *** CLIMATO ***"; echo

    # -- 730M/period (AMIP)
    for k in post/clim*
    do
        if not_empty_dir $k
        then
            f=${exp}-$(basename ${k}.)tar.gz
            cd ..
            tar -zcvf $f ${exp}/${k}
            split_move $f
            #\rm -rf ${exp}/${k}
            cd -
        fi
    done
fi

#########################
# HIRESCLIM2 post ouput #
#########################
if (( do_hiresclim2 )) && not_empty_dir post/mon
then
    echo; echo " *** HIRESCLIM2 ***"; echo

#    # -- all at once (monthly mean of common variable: 400M/Year for IFS@T255)
# 
#    # need to check if remote exists to trap cases of crash after
#    # 'split_move' and before end of '\rm -f', for now let the script stop
#    f=${exp}_hiresclim2.tar.gz
#    cd ..
#    tar -zcvf $f ${exp}/post/mon
#    split_move $f
#    #\rm -rf ${exp}/post/mon
#    cd -

    # --- group 22 (use 7 for coupled HiRes) years together

    cd  post/mon

    ff=($(ls))
    nb=${#ff[*]}
    nn=$(( nb / 22 + 1 ))
    echo
    echo " making $nn archives of 22 years each"

    for k in $(eval echo {0..$((nn-1))})
    do
        is=$((k*22))

        f=${exp}_${ff[${is}]#Post_}_hiresclim2.tar.gz

        echo " archive: $f"

        tar -zcvf $f ${ff[*]:${is}:22}
        split_move $f
    done

    cd -

# --- per year
#     for k in post/mon/*
#     do 
#         if not_empty_dir $k
#         then
#             # need to check if remote exists to trap cases of crash after
#             # 'split_move' and before end of '\rm -f', for now let the script stop
#             f=${exp}_hiresclim2_$(basename $k).tar.gz
#             tar -zcvf $f $k
#             split_move $f
#             \rm -f $k/*
#         fi
#     done
fi
 
#######
# LOG #
#######
if (( do_log ))
then
    echo; echo " *** LOG ***"; echo
    f=log.${exp}.upto.${legnb}.tar.gz
    tar -cvzf $f log
    split_move $f
fi

echo " *II* SUCCESS"
